import os
import json
import csv
import asyncio
import datetime
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from tqdm.asyncio import tqdm
from telethon.sync import TelegramClient
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.tl.types import (
    ChannelParticipantsSearch, UserStatusRecently,
    UserStatusOnline, ChannelParticipantsAdmins,
    MessageService, Message, User
)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running!")

def run_server():
    server = HTTPServer(('0.0.0.0', 10000), SimpleHandler)
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()

DOWNLOADS_PATH = os.path.expanduser("~/Downloads")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ config.json
def load_config():
    try:
        with open("config.json", "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config.json: {e}")
        exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
def create_output_folder(project_name):
    folder_path = os.path.join(DOWNLOADS_PATH, project_name)
    os.makedirs(folder_path, exist_ok=True)
    return folder_path

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV
def save_to_csv(users, folder_path):
    chunks = [users[i:i+50] for i in range(0, len(users), 50)]
    for idx, chunk in enumerate(chunks, 1):
        filename = os.path.join(folder_path, f"users_part_{idx}.csv")
        with open(filename, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["username"])
            for user in chunk:
                writer.writerow([user])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥
def save_error_log(folder_path, message):
    with open(os.path.join(folder_path, "errors.log"), "a", encoding="utf-8") as f:
        f.write(message + "\n")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_active(user):
    status = user.status
    if isinstance(status, (UserStatusRecently, UserStatusOnline)):
        return True
    elif hasattr(status, 'was_online'):
        delta = datetime.datetime.now(datetime.timezone.utc) - status.was_online
        return delta.days <= 2
    return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
async def get_participants(client, entity):
    print("\U0001F4E5 –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ GetParticipantsRequest...")
    participants = []
    offset = 0
    limit = 100
    try:
        while True:
            part = await client(GetParticipantsRequest(
                channel=entity,
                filter=ChannelParticipantsSearch(""),
                offset=offset,
                limit=limit,
                hash=0
            ))
            if not part.users:
                break
            participants.extend(part.users)
            offset += len(part.users)
            await asyncio.sleep(1)
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é.")
        raise e
    return participants

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def get_users_from_messages(client, entity, message_limit):
    print(f"\U0001F4AC –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ {message_limit} —Å–æ–æ–±—â–µ–Ω–∏–π)...")
    user_ids = set()
    async for message in tqdm(client.iter_messages(entity, limit=message_limit), desc="–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"):
        if isinstance(message, (Message, MessageService)) and message.sender_id:
            user_ids.add(message.sender_id)
        await asyncio.sleep(0.05)
    users = []
    for uid in tqdm(user_ids, desc="–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
        try:
            user = await client.get_entity(uid)
            users.append(user)
        except:
            continue
        await asyncio.sleep(0.1)
    return users

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
async def get_users_from_comments(client, entity):
    print("\U0001F5E8Ô∏è –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)...")
    users = []
    try:
        async for message in tqdm(client.iter_messages(entity, limit=500), desc="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–æ–≤"):
            if message.replies and message.replies.comments:
                async for comment in client.iter_messages(message.replies.channel_id, reply_to=message.id):
                    if comment.sender_id:
                        try:
                            user = await client.get_entity(comment.sender_id)
                            users.append(user)
                        except:
                            continue
                    await asyncio.sleep(0.1)
    except:
        print("‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
    return users

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–æ–ª—è–º
async def filter_users(client, users, spammer_ids):
    print("‚ö° –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–æ–ª—è–º...")
    filtered = []
    for user in tqdm(users, desc="–§–∏–ª—å—Ç—Ä—É–µ–º"):
        if not isinstance(user, User):
            continue
        if user.bot or user.id in spammer_ids:
            continue
        if not is_active(user):
            continue
        if not user.username:
            continue
        try:
            participant = await client.get_participant(user.id)
            if getattr(participant, 'admin_rights', None):
                continue
        except:
            pass
        filtered.append(user.username)
        await asyncio.sleep(0.05)
    return list(set(filtered))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º–µ—Ä–æ–≤
async def detect_spammers(client, entity, message_limit):
    print(f"\U0001F9E0 –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∞–º–µ—Ä–æ–≤ (–ø–æ {message_limit} —Å–æ–æ–±—â–µ–Ω–∏—è–º)...")
    cutoff_date = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=40)
    msg_counts = {}
    async for msg in tqdm(client.iter_messages(entity, limit=message_limit), desc="–°–∫–∞–Ω–∏—Ä—É–µ–º"):
        if msg.date < cutoff_date or not msg.sender_id or not msg.text:
            continue
        key = (msg.sender_id, msg.text.strip())
        msg_counts[key] = msg_counts.get(key, 0) + 1
        await asyncio.sleep(0.05)
    spammers = {uid for (uid, _), count in msg_counts.items() if count > 2}
    return spammers

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
async def main():
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    api_id = input("–í–≤–µ–¥–∏—Ç–µ api_id: ").strip()
    api_hash = input("–í–≤–µ–¥–∏—Ç–µ api_hash: ").strip()
    phone_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip()
    project_link = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ username Telegram-–≥—Ä—É–ø–ø—ã: ").strip()
    project_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ").strip()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client = TelegramClient("session", api_id, api_hash)

    output_folder = create_output_folder(project_name)

    use_participants = input("–°–æ–±–∏—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ '–£—á–∞—Å—Ç–Ω–∏–∫–∏' (–¥–∞/–Ω–µ—Ç)? ").strip().lower() == '–¥–∞'
    use_messages = input("–°–æ–±–∏—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–∞/–Ω–µ—Ç)? ").strip().lower() == '–¥–∞'
    use_comments = input("–°–æ–±–∏—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–∞/–Ω–µ—Ç)? ").strip().lower() == '–¥–∞'
    message_limit = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip())

    try:
        await client.start(phone_number)
        entity = await client.get_entity(project_link)

        users = []

        if use_participants:
            try:
                users += await get_participants(client, entity)
            except Exception as e:
                save_error_log(output_folder, f"GetParticipantsRequest error: {e}")

        if use_messages:
            try:
                users += await get_users_from_messages(client, entity, message_limit)
            except Exception as e:
                save_error_log(output_folder, f"iter_messages error: {e}")

        if use_comments:
            try:
                users += await get_users_from_comments(client, entity)
            except Exception as e:
                save_error_log(output_folder, f"comments error: {e}")

        print(f"üì¶ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

        spammer_ids = await detect_spammers(client, entity, message_limit)
        final_usernames = await filter_users(client, users, spammer_ids)

        save_to_csv(final_usernames, output_folder)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(final_usernames)} username –≤: {output_folder}")

    except Exception as e:
        save_error_log(output_folder, f"Critical error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
